#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.100.15)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Cube_1", "stoneBlock"]
    def Cube "Cube" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = </Root/stoneBlock/Cube>
    )
    {
        rel material:binding = </Root/Cube/Smooth_Concrete> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.5
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "Smooth_Concrete" (
            active = true
            references = @SmoothConcrete.usdz@
        )
        {
            color3f inputs:Basecolor_Tint (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-56.812614, 67.17455)
                        float2 sizeInSubgraph = (160.5, 53)
                        int stackingOrderInSubgraph = 2344
                    }
                }
            )
            float2 inputs:UV_Scale (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-725.2588, 351.55255)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 2272
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/Cube/Smooth_Concrete/PreviewSurface.outputs:out>
            token outputs:surface.connect = </Root/stoneBlock/Cube/Smooth_Concrete/UsdPreviewSurface_1.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Dot"
            {
                float2 inputs:in.connect = </Root/Cube/Smooth_Concrete.inputs:UV_Scale>
                float2 ui:nodegraph:node:size = (44, 18)
            }

            over "multiply"
            {
                float3 inputs:in1.connect = </Root/Cube/Smooth_Concrete/Normal.outputs:out>
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "add"
            {
                float3 inputs:in1.connect = </Root/Cube/Smooth_Concrete/multiply.outputs:out>
                float2 ui:nodegraph:node:size = (61.5, 36.5)
            }

            over "PreviewSurface" (
                active = true
            )
            {
                color3f inputs:diffuseColor.connect = </Root/Cube/Smooth_Concrete/Mix.outputs:out>
                float inputs:metallic.connect = </Root/Cube/Smooth_Concrete/Metallic.outputs:out>
                float3 inputs:normal.connect = </Root/Cube/Smooth_Concrete/add.outputs:out>
                float inputs:opacity = 0.7
                float inputs:roughness.connect = </Root/Cube/Smooth_Concrete/Roughness.outputs:out>
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 2347
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:normal", "inputs:roughness"]
            }

            over "Mix"
            {
                color3f inputs:bg.connect = </Root/Cube/Smooth_Concrete/Swizzle_1.outputs:out>
                color3f inputs:fg.connect = </Root/Cube/Smooth_Concrete/Multiply_1.outputs:out>
                float inputs:mix.connect = </Root/Cube/Smooth_Concrete/Swizzle.outputs:out>
                float2 ui:nodegraph:node:size = (109, 145)
            }

            over "Swizzle"
            {
                color4f inputs:in.connect = </Root/Cube/Smooth_Concrete/BaseColor.outputs:out>
                float2 ui:nodegraph:node:size = (133.5, 40)
            }

            over "Swizzle_1"
            {
                color4f inputs:in.connect = </Root/Cube/Smooth_Concrete/BaseColor.outputs:out>
                float2 ui:nodegraph:node:size = (145.5, 53)
            }

            over "Multiply_1"
            {
                color3f inputs:in1.connect = </Root/Cube/Smooth_Concrete.inputs:Basecolor_Tint>
                color3f inputs:in2.connect = </Root/Cube/Smooth_Concrete/Swizzle_1.outputs:out>
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "BaseColor"
            {
                float2 inputs:uvtiling.connect = </Root/Cube/Smooth_Concrete/Dot.outputs:out>
                float2 ui:nodegraph:node:size = (158.5, 235)
            }

            over "Roughness"
            {
                float2 inputs:uvtiling.connect = </Root/Cube/Smooth_Concrete/Dot.outputs:out>
                float2 ui:nodegraph:node:size = (158.5, 235)
                int ui:nodegraph:node:stackingOrder = 2344
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
            }

            over "Metallic"
            {
                float2 inputs:uvtiling.connect = </Root/Cube/Smooth_Concrete/Dot.outputs:out>
                float2 ui:nodegraph:node:size = (158.5, 235)
                int ui:nodegraph:node:stackingOrder = 2346
            }

            over "Normal"
            {
                float2 inputs:uvtiling.connect = </Root/Cube/Smooth_Concrete/Dot.outputs:out>
                float2 ui:nodegraph:node:size = (158.5, 235)
            }

            def Shader "UsdPreviewSurface_1" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:emissiveColor = (0, 0, 0) (
                    colorSpace = "lin_srgb"
                )
                float inputs:roughness = 1
                token outputs:surface
            }
        }
    }
}

