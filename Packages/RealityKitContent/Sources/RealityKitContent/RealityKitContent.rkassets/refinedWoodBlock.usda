#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.100.15)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Cube_4", "Cube_004"]
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    float3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Mesh "Cube_004" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [25, 28, 26, 29, 31, 30, 24, 27, 35, 32, 34, 33, 42, 43, 47, 44, 46, 45, 36, 37, 41, 38, 40, 39, 24, 25, 26, 27, 28, 29, 30, 26, 31, 32, 33, 30, 34, 35, 27, 33, 36, 24, 35, 37, 32, 38, 39, 34, 40, 41, 37, 39, 42, 36, 41, 43, 38, 44, 45, 40, 46, 47, 43, 45, 25, 42, 47, 28, 44, 31, 29, 46, 6, 0, 25, 24, 2, 7, 27, 26, 1, 3, 29, 28, 5, 2, 26, 30, 4, 9, 32, 31, 11, 5, 30, 33, 10, 8, 35, 34, 7, 11, 33, 27, 18, 6, 24, 36, 8, 19, 37, 35, 9, 21, 38, 32, 23, 10, 34, 39, 22, 20, 41, 40, 19, 23, 39, 37, 12, 18, 36, 42, 20, 13, 43, 41, 21, 15, 44, 38, 17, 22, 40, 45, 16, 14, 47, 46, 13, 17, 45, 43, 0, 12, 42, 25, 14, 1, 28, 47, 15, 4, 31, 44, 3, 16, 46, 29]
        rel material:binding = </Root/Cube_004/Cube_4/Material> (
            bindMaterialAs = "weakerThanDescendants"
        )
        normal3f[] normals = [(-0.57735026, -0.57735026, -0.57735026), (-0.57735026, -0.57735026, -0.57735026), (-0.57735026, -0.57735026, -0.57735026), (-0.57735026, -0.57735026, 0.57735026), (-0.57735026, -0.57735026, 0.57735026), (-0.57735026, -0.57735026, 0.57735026), (-0.57735026, 0.57735026, -0.57735026), (-0.57735026, 0.57735026, -0.57735026), (-0.57735026, 0.57735026, -0.57735026), (-0.57735026, 0.57735026, 0.57735026), (-0.57735026, 0.57735026, 0.57735026), (-0.57735026, 0.57735026, 0.57735026), (0.57735026, -0.57735026, -0.57735026), (0.57735026, -0.57735026, -0.57735026), (0.57735026, -0.57735026, -0.57735026), (0.57735026, -0.57735026, 0.57735026), (0.57735026, -0.57735026, 0.57735026), (0.57735026, -0.57735026, 0.57735026), (0.57735026, 0.57735026, -0.57735026), (0.57735026, 0.57735026, -0.57735026), (0.57735026, 0.57735026, -0.57735026), (0.57735026, 0.57735026, 0.57735026), (0.57735026, 0.57735026, 0.57735026), (0.57735026, 0.57735026, 0.57735026), (-0.7071067, 0, -0.7071068), (-0.7071067, 0, -0.7071068), (-0.7071067, 0, -0.7071068), (-0.7071067, 0, -0.7071068), (-0.7071068, -0.7071067, 0), (-0.7071068, -0.7071067, 0), (-0.7071068, -0.7071067, 0), (-0.7071068, -0.7071067, 0), (-0.7071067, 0, 0.7071068), (-0.7071067, 0, 0.7071068), (-0.7071067, 0, 0.7071068), (-0.7071067, 0, 0.7071068), (-0.7071068, 0.7071067, 0), (-0.7071068, 0.7071067, 0), (-0.7071068, 0.7071067, 0), (-0.7071068, 0.7071067, 0), (0, 0.7071068, -0.7071067), (0, 0.7071068, -0.7071067), (0, 0.7071068, -0.7071067), (0, 0.7071068, -0.7071067), (0, 0.7071068, 0.7071067), (0, 0.7071068, 0.7071067), (0, 0.7071068, 0.7071067), (0, 0.7071068, 0.7071067), (0.7071068, 0.7071067, 0), (0.7071068, 0.7071067, 0), (0.7071068, 0.7071067, 0), (0.7071068, 0.7071067, 0), (0.7071067, 0, -0.7071068), (0.7071067, 0, -0.7071068), (0.7071067, 0, -0.7071068), (0.7071067, 0, -0.7071068), (0.7071067, 0, 0.7071068), (0.7071067, 0, 0.7071068), (0.7071067, 0, 0.7071068), (0.7071067, 0, 0.7071068), (0.7071068, -0.7071067, 0), (0.7071068, -0.7071067, 0), (0.7071068, -0.7071067, 0), (0.7071068, -0.7071067, 0), (0, -0.7071068, -0.7071067), (0, -0.7071068, -0.7071067), (0, -0.7071068, -0.7071067), (0, -0.7071068, -0.7071067), (0, -0.7071068, 0.7071067), (0, -0.7071068, 0.7071067), (0, -0.7071068, 0.7071067), (0, -0.7071068, 0.7071067), (0.49194026, 0, -0.8706289), (0.49194026, 0, -0.8706289), (0.49194026, 0, -0.8706289), (0.49194026, 0, -0.8706289), (-0.8706288, 0, 0.4919405), (-0.8706288, 0, 0.4919405), (-0.8706288, 0, 0.4919405), (-0.8706288, 0, 0.4919405), (0.4919405, -0.8706288, 0), (0.4919405, -0.8706288, 0), (0.4919405, -0.8706288, 0), (0.4919405, -0.8706288, 0), (-0.8706289, 0.49194026, 0), (-0.8706289, 0.49194026, 0), (-0.8706289, 0.49194026, 0), (-0.8706289, 0.49194026, 0), (0.49194026, 0, 0.8706289), (0.49194026, 0, 0.8706289), (0.49194026, 0, 0.8706289), (0.49194026, 0, 0.8706289), (-0.8706288, 0, -0.4919405), (-0.8706288, 0, -0.4919405), (-0.8706288, 0, -0.4919405), (-0.8706288, 0, -0.4919405), (0.4919405, 0.8706288, 0), (0.4919405, 0.8706288, 0), (0.4919405, 0.8706288, 0), (0.4919405, 0.8706288, 0), (-0.8706289, -0.49194026, 0), (-0.8706289, -0.49194026, 0), (-0.8706289, -0.49194026, 0), (-0.8706289, -0.49194026, 0), (0, -0.4919405, -0.8706288), (0, -0.4919405, -0.8706288), (0, -0.4919405, -0.8706288), (0, -0.4919405, -0.8706288), (0, 0.8706289, 0.49194026), (0, 0.8706289, 0.49194026), (0, 0.8706289, 0.49194026), (0, 0.8706289, 0.49194026), (0, -0.4919405, 0.8706288), (0, -0.4919405, 0.8706288), (0, -0.4919405, 0.8706288), (0, -0.4919405, 0.8706288), (0, 0.8706289, -0.49194026), (0, 0.8706289, -0.49194026), (0, 0.8706289, -0.49194026), (0, 0.8706289, -0.49194026), (0.8706289, -0.49194026, 0), (0.8706289, -0.49194026, 0), (0.8706289, -0.49194026, 0), (0.8706289, -0.49194026, 0), (-0.4919405, 0.8706288, 0), (-0.4919405, 0.8706288, 0), (-0.4919405, 0.8706288, 0), (-0.4919405, 0.8706288, 0), (-0.49194026, 0, -0.8706289), (-0.49194026, 0, -0.8706289), (-0.49194026, 0, -0.8706289), (-0.49194026, 0, -0.8706289), (0.8706288, 0, 0.4919405), (0.8706288, 0, 0.4919405), (0.8706288, 0, 0.4919405), (0.8706288, 0, 0.4919405), (-0.49194026, 0, 0.8706289), (-0.49194026, 0, 0.8706289), (-0.49194026, 0, 0.8706289), (-0.49194026, 0, 0.8706289), (0.8706288, 0, -0.4919405), (0.8706288, 0, -0.4919405), (0.8706288, 0, -0.4919405), (0.8706288, 0, -0.4919405), (-0.4919405, -0.8706288, 0), (-0.4919405, -0.8706288, 0), (-0.4919405, -0.8706288, 0), (-0.4919405, -0.8706288, 0), (0.8706289, 0.49194026, 0), (0.8706289, 0.49194026, 0), (0.8706289, 0.49194026, 0), (0.8706289, 0.49194026, 0), (0, 0.4919405, -0.8706288), (0, 0.4919405, -0.8706288), (0, 0.4919405, -0.8706288), (0, 0.4919405, -0.8706288), (0, -0.8706289, 0.49194026), (0, -0.8706289, 0.49194026), (0, -0.8706289, 0.49194026), (0, -0.8706289, 0.49194026), (0, 0.4919405, 0.8706288), (0, 0.4919405, 0.8706288), (0, 0.4919405, 0.8706288), (0, 0.4919405, 0.8706288), (0, -0.8706289, -0.49194026), (0, -0.8706289, -0.49194026), (0, -0.8706289, -0.49194026), (0, -0.8706289, -0.49194026)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-0.6851645, -0.6851645, -0.9109136), (-0.6851645, -0.9109136, -0.6851645), (-0.9109136, -0.6851645, -0.6851645), (-0.6851645, -0.9109136, 0.6851645), (-0.6851645, -0.6851645, 0.9109136), (-0.9109136, -0.6851645, 0.6851645), (-0.6851645, 0.6851645, -0.9109136), (-0.9109136, 0.6851645, -0.6851645), (-0.6851645, 0.9109136, -0.6851645), (-0.6851645, 0.6851645, 0.9109136), (-0.6851645, 0.9109136, 0.6851645), (-0.9109136, 0.6851645, 0.6851645), (0.6851645, -0.6851645, -0.9109136), (0.9109136, -0.6851645, -0.6851645), (0.6851645, -0.9109136, -0.6851645), (0.6851645, -0.6851645, 0.9109136), (0.6851645, -0.9109136, 0.6851645), (0.9109136, -0.6851645, 0.6851645), (0.6851645, 0.6851645, -0.9109136), (0.6851645, 0.9109136, -0.6851645), (0.9109136, 0.6851645, -0.6851645), (0.6851645, 0.6851645, 0.9109136), (0.9109136, 0.6851645, 0.6851645), (0.6851645, 0.9109136, 0.6851645), (-0.8428283, 0.8428283, -1), (-0.8428283, -0.8428283, -1), (-1, -0.8428283, -0.8428283), (-1, 0.8428283, -0.8428283), (-0.8428283, -1, -0.8428283), (-0.8428283, -1, 0.8428283), (-1, -0.8428283, 0.8428283), (-0.8428283, -0.8428283, 1), (-0.8428283, 0.8428283, 1), (-1, 0.8428283, 0.8428283), (-0.8428283, 1, 0.8428283), (-0.8428283, 1, -0.8428283), (0.8428283, 0.8428283, -1), (0.8428283, 1, -0.8428283), (0.8428283, 0.8428283, 1), (0.8428283, 1, 0.8428283), (1, 0.8428283, 0.8428283), (1, 0.8428283, -0.8428283), (0.8428283, -0.8428283, -1), (1, -0.8428283, -0.8428283), (0.8428283, -0.8428283, 1), (1, -0.8428283, 0.8428283), (0.8428283, -1, 0.8428283), (0.8428283, -1, -0.8428283)]
        texCoord2f[] primvars:UVMap = [(0.14464647, 0.73035353), (0.14464647, 0.75), (0.125, 0.73035353), (0.6053536, 0), (0.625, 0.019646466), (0.60535353, 0.019646466), (0.14464647, 0.51964647), (0.125, 0.51964647), (0.14464647, 0.5), (0.625, 0.23035353), (0.6053536, 0.25), (0.60535353, 0.23035353), (0.35535353, 0.73035353), (0.375, 0.73035353), (0.35535353, 0.75), (0.625, 0.76964647), (0.60535353, 0.76964647), (0.6053536, 0.75), (0.35535353, 0.51964647), (0.35535353, 0.5), (0.375, 0.51964647), (0.625, 0.48035353), (0.6053536, 0.5), (0.60535353, 0.48035353), (0.14464647, 0.51964647), (0.14464647, 0.73035353), (0.125, 0.73035353), (0.125, 0.51964647), (0.39464647, 0), (0.6053536, 0), (0.60535353, 0.019646466), (0.3946465, 0.019646466), (0.625, 0.019646466), (0.625, 0.23035353), (0.60535353, 0.23035353), (0.60535353, 0.019646466), (0.60535353, 0.26964647), (0.3946465, 0.26964647), (0.39464647, 0.23035353), (0.60535353, 0.23035353), (0.35535353, 0.51964647), (0.14464647, 0.51964647), (0.14464647, 0.5), (0.35535353, 0.5), (0.625, 0.26964647), (0.625, 0.48035353), (0.60535353, 0.48035353), (0.60535353, 0.26964647), (0.60535353, 0.51964647), (0.3946465, 0.51964647), (0.39464647, 0.48035353), (0.60535353, 0.48035353), (0.35535353, 0.73035353), (0.35535353, 0.51964647), (0.3946465, 0.51964647), (0.39464647, 0.73035353), (0.64464647, 0.51964647), (0.64464647, 0.73035353), (0.60535353, 0.73035353), (0.60535353, 0.51964647), (0.60535353, 0.76964647), (0.3946465, 0.76964647), (0.39464647, 0.73035353), (0.60535353, 0.73035353), (0.14464647, 0.73035353), (0.35535353, 0.73035353), (0.35535353, 0.75), (0.14464647, 0.75), (0.625, 0.76964647), (0.625, 0.98035353), (0.60535353, 0.98035353), (0.60535353, 0.76964647), (0.15597841, 0.53097844), (0.15597841, 0.71902174), (0.14464647, 0.73035353), (0.14464647, 0.51964647), (0.40597847, 0.030978393), (0.40597844, 0.21902165), (0.39464647, 0.23035353), (0.3946465, 0.019646466), (0.40597844, 0.96902174), (0.5940217, 0.9690216), (0.60535353, 0.98035353), (0.39464647, 0.98035353), (0.5940216, 0.030978387), (0.40597847, 0.030978393), (0.3946465, 0.019646466), (0.60535353, 0.019646466), (0.8440217, 0.7190217), (0.8440217, 0.53097844), (0.8553536, 0.51964647), (0.8553536, 0.73035353), (0.5940217, 0.21902162), (0.5940216, 0.030978387), (0.60535353, 0.019646466), (0.60535353, 0.23035353), (0.5940216, 0.28097838), (0.40597847, 0.2809784), (0.3946465, 0.26964647), (0.60535353, 0.26964647), (0.40597844, 0.21902165), (0.5940217, 0.21902162), (0.60535353, 0.23035353), (0.39464647, 0.23035353), (0.34402165, 0.53097844), (0.15597841, 0.53097844), (0.14464647, 0.51964647), (0.35535353, 0.51964647), (0.40597847, 0.2809784), (0.40597844, 0.46902168), (0.39464647, 0.48035353), (0.3946465, 0.26964647), (0.8440217, 0.53097844), (0.6559785, 0.53097844), (0.64464647, 0.51964647), (0.8553536, 0.51964647), (0.5940217, 0.46902162), (0.5940216, 0.28097838), (0.60535353, 0.26964647), (0.60535353, 0.48035353), (0.5940216, 0.53097844), (0.40597847, 0.53097844), (0.3946465, 0.51964647), (0.60535353, 0.51964647), (0.40597844, 0.46902168), (0.5940217, 0.46902162), (0.60535353, 0.48035353), (0.39464647, 0.48035353), (0.34402165, 0.7190217), (0.34402165, 0.53097844), (0.35535353, 0.51964647), (0.35535353, 0.73035353), (0.40597847, 0.53097844), (0.40597844, 0.71902174), (0.39464647, 0.73035353), (0.3946465, 0.51964647), (0.6559785, 0.53097844), (0.6559785, 0.71902174), (0.64464647, 0.73035353), (0.64464647, 0.51964647), (0.5940217, 0.7190217), (0.5940216, 0.53097844), (0.60535353, 0.51964647), (0.60535353, 0.73035353), (0.5940216, 0.7809783), (0.40597847, 0.78097844), (0.3946465, 0.76964647), (0.60535353, 0.76964647), (0.40597844, 0.71902174), (0.5940217, 0.7190217), (0.60535353, 0.73035353), (0.39464647, 0.73035353), (0.15597841, 0.71902174), (0.34402165, 0.7190217), (0.35535353, 0.73035353), (0.14464647, 0.73035353), (0.40597847, 0.78097844), (0.40597844, 0.96902174), (0.39464647, 0.98035353), (0.3946465, 0.76964647), (0.6559785, 0.71902174), (0.8440217, 0.7190217), (0.8553536, 0.73035353), (0.64464647, 0.73035353), (0.5940217, 0.9690216), (0.5940216, 0.7809783), (0.60535353, 0.76964647), (0.60535353, 0.98035353)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.25, 0.25, 0.25)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "Cube_4" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["Wood_Plank", "Material", "Cube_004"]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [14, 16, 3, 1, 20, 22, 17, 13, 21, 9, 4, 15, 2, 5, 11, 7, 8, 10, 23, 19, 6, 18, 12, 0]
            rel material:binding = </Root/Cube_004/Cube_4/Wood_Plank> (
                bindMaterialAs = "weakerThanDescendants"
            )
            normal3f[] normals = [(0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.6851645, -0.6851645, -0.9109136), (-0.6851645, -0.9109136, -0.6851645), (-0.9109136, -0.6851645, -0.6851645), (-0.6851645, -0.9109136, 0.6851645), (-0.6851645, -0.6851645, 0.9109136), (-0.9109136, -0.6851645, 0.6851645), (-0.6851645, 0.6851645, -0.9109136), (-0.9109136, 0.6851645, -0.6851645), (-0.6851645, 0.9109136, -0.6851645), (-0.6851645, 0.6851645, 0.9109136), (-0.6851645, 0.9109136, 0.6851645), (-0.9109136, 0.6851645, 0.6851645), (0.6851645, -0.6851645, -0.9109136), (0.9109136, -0.6851645, -0.6851645), (0.6851645, -0.9109136, -0.6851645), (0.6851645, -0.6851645, 0.9109136), (0.6851645, -0.9109136, 0.6851645), (0.9109136, -0.6851645, 0.6851645), (0.6851645, 0.6851645, -0.9109136), (0.6851645, 0.9109136, -0.6851645), (0.9109136, 0.6851645, -0.6851645), (0.6851645, 0.6851645, 0.9109136), (0.9109136, 0.6851645, 0.6851645), (0.6851645, 0.9109136, 0.6851645)]
            texCoord2f[] primvars:UVMap = [(0.40597847, 0.78097844), (0.5940216, 0.7809783), (0.5940217, 0.9690216), (0.40597844, 0.96902174), (0.40597847, 0.53097844), (0.5940216, 0.53097844), (0.5940217, 0.7190217), (0.40597844, 0.71902174), (0.6559785, 0.53097844), (0.8440217, 0.53097844), (0.8440217, 0.7190217), (0.6559785, 0.71902174), (0.40597847, 0.030978393), (0.5940216, 0.030978387), (0.5940217, 0.21902162), (0.40597844, 0.21902165), (0.40597847, 0.2809784), (0.5940216, 0.28097838), (0.5940217, 0.46902162), (0.40597844, 0.46902168), (0.15597841, 0.53097844), (0.34402165, 0.53097844), (0.34402165, 0.7190217), (0.15597841, 0.71902174)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Wood_Plank" (
                active = true
                references = @WoodPlank.usdz@
            )
            {
                color3f inputs:Basecolor_Tint = (0.618885, 0.40944156, 0.2561115) (
                    colorSpace = "srgb_displayp3"
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-56.812614, 67.17455)
                            float2 sizeInSubgraph = (160.5, 53)
                            int stackingOrderInSubgraph = 2368
                        }
                    }
                )
                float2 inputs:UV_Scale = (1, 0.5) (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-725.2588, 351.55255)
                            float2 sizeInSubgraph = (138.5, 53)
                            int stackingOrderInSubgraph = 2272
                        }
                    }
                )
                token outputs:mtlx:surface.connect = </Root/Cube_004/Cube_4/Wood_Plank/PreviewSurface.outputs:out>
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Dot"
                {
                    float2 inputs:in.connect = </Root/Cube_004/Cube_4/Wood_Plank.inputs:UV_Scale>
                    float2 ui:nodegraph:node:size = (44, 18)
                }

                over "multiply"
                {
                    float3 inputs:in1.connect = </Root/Cube_004/Cube_4/Wood_Plank/Normal.outputs:out>
                    float2 ui:nodegraph:node:size = (60, 36)
                    int ui:nodegraph:node:stackingOrder = 2360
                }

                over "add"
                {
                    float3 inputs:in1.connect = </Root/Cube_004/Cube_4/Wood_Plank/multiply.outputs:out>
                    float2 ui:nodegraph:node:size = (61.5, 36.5)
                }

                over "PreviewSurface"
                {
                    color3f inputs:diffuseColor.connect = </Root/Cube_004/Cube_4/Wood_Plank/Mix.outputs:out>
                    float inputs:metallic.connect = </Root/Cube_004/Cube_4/Wood_Plank/Metallic.outputs:out>
                    float3 inputs:normal.connect = </Root/Cube_004/Cube_4/Wood_Plank/add.outputs:out>
                    float inputs:roughness.connect = </Root/Cube_004/Cube_4/Wood_Plank/Roughness.outputs:out>
                    float2 ui:nodegraph:node:size = (148.5, 199)
                    int ui:nodegraph:node:stackingOrder = 2366
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:opacity"]
                }

                over "Mix"
                {
                    color3f inputs:bg.connect = </Root/Cube_004/Cube_4/Wood_Plank/Swizzle_1.outputs:out>
                    color3f inputs:fg.connect = </Root/Cube_004/Cube_4/Wood_Plank/Multiply_1.outputs:out>
                    float inputs:mix.connect = </Root/Cube_004/Cube_4/Wood_Plank/Swizzle.outputs:out>
                    float2 ui:nodegraph:node:size = (109, 145)
                }

                over "Swizzle"
                {
                    color4f inputs:in.connect = </Root/Cube_004/Cube_4/Wood_Plank/BaseColor.outputs:out>
                    float2 ui:nodegraph:node:size = (133.5, 40)
                    int ui:nodegraph:node:stackingOrder = 2358
                }

                over "Swizzle_1"
                {
                    color4f inputs:in.connect = </Root/Cube_004/Cube_4/Wood_Plank/BaseColor.outputs:out>
                    float2 ui:nodegraph:node:size = (145.5, 53)
                    int ui:nodegraph:node:stackingOrder = 2359
                }

                over "Multiply_1"
                {
                    color3f inputs:in1.connect = </Root/Cube_004/Cube_4/Wood_Plank.inputs:Basecolor_Tint>
                    color3f inputs:in2.connect = </Root/Cube_004/Cube_4/Wood_Plank/Swizzle_1.outputs:out>
                    float2 ui:nodegraph:node:size = (60, 36)
                }

                over "BaseColor"
                {
                    float2 inputs:uvtiling.connect = </Root/Cube_004/Cube_4/Wood_Plank/Dot.outputs:out>
                    float2 ui:nodegraph:node:size = (158.5, 235)
                    int ui:nodegraph:node:stackingOrder = 2353
                }

                over "Roughness"
                {
                    float2 inputs:uvtiling.connect = </Root/Cube_004/Cube_4/Wood_Plank/Dot.outputs:out>
                    float2 ui:nodegraph:node:size = (158.5, 235)
                }

                over "Metallic"
                {
                    float2 inputs:uvtiling.connect = </Root/Cube_004/Cube_4/Wood_Plank/Dot.outputs:out>
                    float2 ui:nodegraph:node:size = (158.5, 235)
                }

                over "Normal"
                {
                    float2 inputs:uvtiling.connect = </Root/Cube_004/Cube_4/Wood_Plank/Dot.outputs:out>
                    float2 ui:nodegraph:node:size = (158.5, 235)
                    int ui:nodegraph:node:stackingOrder = 2361
                }
            }

            def Material "Material"
            {
                reorder nameChildren = ["UsdPreviewSurface", "Wood_Plank"]
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Cube_004/Cube_4/Material/UsdPreviewSurface.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 109.5)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                def Shader "UsdPreviewSurface"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0.45991492, 0.45991492, 0.45991492) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 0.2
                    float inputs:roughness = 1
                    token outputs:surface
                }
            }
        }
    }
}

